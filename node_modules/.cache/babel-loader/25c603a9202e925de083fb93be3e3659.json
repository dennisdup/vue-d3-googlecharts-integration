{"remainingRequest":"/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/babel-loader/lib/index.js!/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/cache-loader/dist/cjs.js??ref--0-0!/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/vue-loader/lib/index.js??vue-loader-options!/opt/lampp/htdocs/ac_frontend_app/public/development/src/views/chart-tree.vue?vue&type=script&lang=js&","dependencies":[{"path":"/opt/lampp/htdocs/ac_frontend_app/public/development/src/views/chart-tree.vue","mtime":1558142814926},{"path":"/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Vuex from \"vuex\";\nimport { GChart } from 'vue-google-charts';\nexport default {\n  props: ['treenodes', 'selectident'],\n  data: function data() {\n    var _this = this;\n\n    return {\n      treedata: [],\n      chartData: [],\n      chartOptions: {\n        allowHtml: true,\n        // allowCollapse : true,\n        nodeClass: \"w-auto p-3 bg-gradient-info rounded\",\n        selectedNodeClass: \"bg-gradient-warning\",\n        size: \"large\"\n      },\n      chartEvents: {\n        'select': function select() {\n          _this.updateSteps();\n        },\n        'onmouseover': function onmouseover(row) {\n          _this.updateSelect(row);\n        }\n      },\n      selectedNode: 0\n    };\n  },\n  components: {\n    GChart: GChart\n  },\n  mounted: function mounted() {\n    this.treedata = this.subTreeChildren;\n  },\n  computed: {\n    subTreeChildren: function subTreeChildren() {\n      var steps = this.treenodes;\n      var all = [];\n      var unfilteredarr = steps;\n      unfilteredarr.forEach(function (item, index) {\n        // prepare tree to assign parent\n        var parentid = \"\";\n\n        if (index > 0) {\n          parentid = unfilteredarr[index - 1]._id;\n        }\n\n        var childinfo = [{\n          v: item._id,\n          f: item.name\n        }, parentid, item.name];\n        all.push(childinfo);\n      });\n      return all;\n    }\n  },\n  methods: {\n    updateSteps: function updateSteps() {\n      var $this = this;\n\n      if ($this.selectident == 'tree-container') {\n        $this.$store.dispatch('updateSteps', $this.treenodes[$this.selectedNode]);\n      }\n    },\n    updateSelect: function updateSelect(val) {\n      this.selectedNode = val.row;\n    },\n    onChartReady: function onChartReady() {\n      var $this = this;\n      var data = new google.visualization.DataTable();\n      data.addColumn('string', 'Name');\n      data.addColumn('string', 'Parent');\n      data.addColumn('string', 'ToolTip'); // For each orgchart box, provide the name, parent, and tooltip to show.\n\n      data.addRows($this.treedata);\n      $this.chartData = data;\n    }\n  }\n};",{"version":3,"sources":["chart-tree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAcA,OAAA,IAAA,MAAA,MAAA;AACA,SAAA,MAAA,QAAA,mBAAA;AACA,eAAA;AACA,EAAA,KAAA,EAAA,CAAA,WAAA,EAAA,aAAA,CADA;AAEA,EAAA,IAFA,kBAEA;AAAA;;AACA,WAAA;AACA,MAAA,QAAA,EAAA,EADA;AAEA,MAAA,SAAA,EAAA,EAFA;AAGA,MAAA,YAAA,EAAA;AACA,QAAA,SAAA,EAAA,IADA;AAEA;AACA,QAAA,SAAA,EAAA,qCAHA;AAIA,QAAA,iBAAA,EAAA,qBAJA;AAKA,QAAA,IAAA,EAAA;AALA,OAHA;AAUA,MAAA,WAAA,EAAA;AACA,kBAAA,kBAAA;AACA,UAAA,KAAA,CAAA,WAAA;AACA,SAHA;AAIA,uBAAA,qBAAA,GAAA,EAAA;AACA,UAAA,KAAA,CAAA,YAAA,CAAA,GAAA;AACA;AANA,OAVA;AAkBA,MAAA,YAAA,EAAA;AAlBA,KAAA;AAoBA,GAvBA;AAwBA,EAAA,UAAA,EAAA;AACA,IAAA,MAAA,EAAA;AADA,GAxBA;AA2BA,EAAA,OA3BA,qBA2BA;AACA,SAAA,QAAA,GAAA,KAAA,eAAA;AACA,GA7BA;AA8BA,EAAA,QAAA,EAAA;AACA,IAAA,eADA,6BACA;AACA,UAAA,KAAA,GAAA,KAAA,SAAA;AACA,UAAA,GAAA,GAAA,EAAA;AACA,UAAA,aAAA,GAAA,KAAA;AACA,MAAA,aAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA,KAAA,EAAA;AAAA;AACA,YAAA,QAAA,GAAA,EAAA;;AACA,YAAA,KAAA,GAAA,CAAA,EAAA;AACA,UAAA,QAAA,GAAA,aAAA,CAAA,KAAA,GAAA,CAAA,CAAA,CAAA,GAAA;AACA;;AACA,YAAA,SAAA,GAAA,CAAA;AAAA,UAAA,CAAA,EAAA,IAAA,CAAA,GAAA;AAAA,UAAA,CAAA,EAAA,IAAA,CAAA;AAAA,SAAA,EAAA,QAAA,EAAA,IAAA,CAAA,IAAA,CAAA;AACA,QAAA,GAAA,CAAA,IAAA,CAAA,SAAA;AACA,OAPA;AAQA,aAAA,GAAA;AACA;AAdA,GA9BA;AA8CA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,yBACA;AACA,UAAA,KAAA,GAAA,IAAA;;AACA,UAAA,KAAA,CAAA,WAAA,IAAA,gBAAA,EAAA;AACA,QAAA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,aAAA,EAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,YAAA,CAAA;AACA;AACA,KANA;AAOA,IAAA,YAPA,wBAOA,GAPA,EAOA;AACA,WAAA,YAAA,GAAA,GAAA,CAAA,GAAA;AACA,KATA;AAUA,IAAA,YAVA,0BAUA;AACA,UAAA,KAAA,GAAA,IAAA;AACA,UAAA,IAAA,GAAA,IAAA,MAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AACA,MAAA,IAAA,CAAA,SAAA,CAAA,QAAA,EAAA,MAAA;AACA,MAAA,IAAA,CAAA,SAAA,CAAA,QAAA,EAAA,QAAA;AACA,MAAA,IAAA,CAAA,SAAA,CAAA,QAAA,EAAA,SAAA,EALA,CAMA;;AACA,MAAA,IAAA,CAAA,OAAA,CAAA,KAAA,CAAA,QAAA;AACA,MAAA,KAAA,CAAA,SAAA,GAAA,IAAA;AACA;AAnBA;AA9CA,CAAA","sourcesContent":["<template>\n    <div>\n        <GChart\n            type=\"OrgChart\"\n            :settings=\"{ packages: ['orgchart'] }\"\n            :options=\"chartOptions\"    \n            :events=\"chartEvents\"    \n            @ready=\"onChartReady\" \n            :data=\"chartData\"\n        />\n    </div>\n</template>\n\n<script>\nimport Vuex from \"vuex\";\nimport { GChart } from 'vue-google-charts'\nexport default {\n    props : ['treenodes','selectident'],\n    data() {\n        return {\n            treedata : [],\n            chartData : [],\n            chartOptions: {\n                allowHtml : true,\n                // allowCollapse : true,\n                nodeClass : \"w-auto p-3 bg-gradient-info rounded\",\n                selectedNodeClass : \"bg-gradient-warning\",\n                size : \"large\",\n            },     \n            chartEvents: {\n                'select': () => {\n                    this.updateSteps();\n                },\n                'onmouseover' : (row) =>{\n                    this.updateSelect(row);\n                },\n            },\n            selectedNode : 0  \n        }\n    },\n    components: {\n        GChart\n    },\n    mounted(){\n        this.treedata = this.subTreeChildren;\n    },\n    computed:{\n        subTreeChildren(){\n            let steps = this.treenodes;\n            let all = [];  \n            let unfilteredarr =  steps;\n            unfilteredarr.forEach(function(item,index) { // prepare tree to assign parent\n                let parentid = \"\";\n                if(index>0){\n                    parentid = unfilteredarr[index-1]._id\n                }\n                let childinfo = [ { v:item._id, f:item.name }, parentid, item.name ];\n                all.push(childinfo);                    \n            });\n            return all;\n        }\n    },\n    methods: {\n        updateSteps(){\n            let $this = this;\n            if($this.selectident == 'tree-container'){\n                $this.$store.dispatch('updateSteps',$this.treenodes[$this.selectedNode]);\n            }\n        },\n        updateSelect(val){\n            this.selectedNode = val.row;\n        },\n        onChartReady(){\n           let $this = this;\n           var data = new google.visualization.DataTable();\n            data.addColumn('string', 'Name');\n            data.addColumn('string', 'Parent');\n            data.addColumn('string', 'ToolTip');\n            // For each orgchart box, provide the name, parent, and tooltip to show.\n            data.addRows($this.treedata);\n            $this.chartData = data;\n        }\n    }\n\n}\n</script>\n\n<style>\n  \n</style>\n"],"sourceRoot":"src/views"}]}