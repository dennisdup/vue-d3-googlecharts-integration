{"remainingRequest":"/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/thread-loader/dist/cjs.js!/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/babel-loader/lib/index.js!/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/eslint-loader/index.js??ref--13-0!/opt/lampp/htdocs/ac_frontend_app/public/development/src/views/expand-tree.js","dependencies":[{"path":"/opt/lampp/htdocs/ac_frontend_app/public/development/src/views/expand-tree.js","mtime":1557431857761},{"path":"/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\n\n/* Expandable tree v.1.0 */\nfunction expandTree(d3, treedata, elementselector, updateSub) {\n  // tree hierachy\n  var root = treedata;\n  var margin = {\n    top: 20,\n    right: 120,\n    bottom: 20,\n    left: 120\n  },\n      width = 960 - margin.right - margin.left,\n      height = 800 - margin.top - margin.bottom;\n  var i = 0,\n      duration = 750,\n      rectW = 300,\n      rectH = 50;\n  var tree = d3.layout.tree().nodeSize([70, 40]);\n  var diagonal = d3.svg.diagonal().projection(function (d) {\n    return [d.x + rectW / 2, d.y + rectH / 2];\n  });\n  var zm;\n  var svg = d3.select(\"#\" + elementselector).append(\"svg\").attr(\"width\", 500).attr(\"height\", 1000).call(responsivefy) //.call(zm = d3.behavior.zoom().scaleExtent([1,3]).on(\"zoom\", redraw() ))\n  .append(\"g\").attr(\"transform\", \"translate(\" + 90 + \",\" + 30 + \")\"); //necessary so that zoom knows where to zoom and unzoom from\n  //zm.translate([350, 20]);\n\n  function responsivefy(svg) {\n    // get container + svg aspect ratio\n    var container = d3.select(svg.node().parentNode),\n        width = parseInt(svg.style(\"width\")),\n        height = parseInt(svg.style(\"height\")),\n        aspect = width / height; // add viewBox and preserveAspectRatio properties,\n    // and call resize so that svg resizes on inital page load\n\n    svg.attr(\"viewBox\", \"0 0 \" + width + \" \" + height).attr(\"perserveAspectRatio\", \"xMinYMid\").call(resize);\n    d3.select(window).on(\"resize.\" + container.attr(\"id\"), resize); // get width of container and resize svg to fit it\n\n    function resize() {\n      var targetWidth = parseInt(container.style(\"width\"));\n      svg.attr(\"width\", targetWidth);\n      svg.attr(\"height\", Math.round(targetWidth / aspect));\n    }\n  }\n\n  root.x0 = 0;\n  root.y0 = height / 2;\n\n  function collapse(d) {\n    if (elementselector == \"tree-container\") {\n      if (d.children) {\n        d._children = d.children;\n\n        d._children.forEach(collapse);\n\n        d.children = null;\n      }\n    }\n  }\n\n  root.children.forEach(collapse);\n  update(root);\n  d3.select(\"#\" + elementselector).style(\"height\", \"600px\");\n\n  function update(source) {\n    // Compute the new tree layout.\n    var nodes = tree.nodes(root).reverse(),\n        links = tree.links(nodes); // Normalize for fixed-depth.\n\n    nodes.forEach(function (d) {\n      d.y = d.depth * 135;\n    }); // Update the nodes…\n\n    var node = svg.selectAll(\"g.node\").data(nodes, function (d) {\n      return d.id || (d.id = ++i);\n    }); // Enter any new nodes at the parent's previous position.\n\n    var nodeEnter = node.enter().append(\"g\").attr(\"class\", \"node\").attr(\"transform\", function (d) {\n      return \"translate(\" + source.x0 + \",\" + source.y0 + \")\";\n    }).on(\"click\", click);\n    nodeEnter.append(\"rect\").attr(\"width\", rectW).attr(\"height\", rectH).attr(\"stroke\", \"black\").attr(\"stroke-width\", 1).style(\"fill\", function (d) {\n      return d._children ? \"#9e9e9e\" : \"#fff\";\n    }); // nodeEnter.append(\"text\")\n    // .attr(\"x\", rectW / 2)\n    // .attr(\"y\", rectH / 2)\n    // .attr(\"dy\", \".35em\")\n    // .attr(\"text-anchor\", \"middle\")\n    // .text(function (d) {\n    //     return d.name;\n    // })\n    //.call(wrap);\n\n    nodeEnter.append(\"foreignObject\").attr(\"width\", function () {\n      return rectW;\n    }).attr(\"height\", function () {\n      return rectH;\n    }).append(\"xhtml\").html(function (d) {\n      return \"<div style=\\\"width:'\".concat(rectW, \"px; height:\").concat(rectH, \"'px;\\\" class=\\\"node-text wordwrap text-center\\\"><b>\").concat(d.name, \"</b></div>\");\n    }); // Transition nodes to their new position.\n\n    var nodeUpdate = node.transition().duration(duration).attr(\"transform\", function (d) {\n      return \"translate(\" + d.x + \",\" + d.y + \")\";\n    });\n    nodeUpdate.select(\"rect\").attr(\"width\", rectW).attr(\"height\", rectH).attr(\"stroke\", \"black\").attr(\"stroke-width\", 1).style(\"fill\", function (d) {\n      return d._children ? \"#9e9e9e\" : \"#fff\";\n    });\n    nodeUpdate.select(\"text\").style(\"fill-opacity\", 1); // Transition exiting nodes to the parent's new position.\n\n    var nodeExit = node.exit().transition().duration(duration).attr(\"transform\", function (d) {\n      return \"translate(\" + source.x + \",\" + source.y + \")\";\n    }).remove();\n    nodeExit.select(\"rect\").attr(\"width\", rectW).attr(\"height\", rectH) //.attr(\"width\", bbox.getBBox().width)\"\"\n    //.attr(\"height\", bbox.getBBox().height)\n    .attr(\"stroke\", \"black\").attr(\"stroke-width\", 1);\n    nodeExit.select(\"text\"); // Update the links…\n\n    var link = svg.selectAll(\"path.link\").data(links, function (d) {\n      return d.target.id;\n    }); // Enter any new links at the parent's previous position.\n\n    link.enter().insert(\"path\", \"g\").attr(\"class\", \"link\").attr(\"x\", rectW / 2).attr(\"y\", rectH / 2) //.attr('marker-end', 'url(#end-arrow)')\n    .attr(\"d\", function (d) {\n      var o = {\n        x: source.x0,\n        y: source.y0\n      };\n      return diagonal({\n        source: o,\n        target: o\n      });\n    }); // Transition links to their new position.\n\n    link.transition().duration(duration).attr(\"d\", diagonal); // Transition exiting nodes to the parent's new position.\n\n    link.exit().transition().duration(duration).attr(\"d\", function (d) {\n      var o = {\n        x: source.x,\n        y: source.y\n      };\n      return diagonal({\n        source: o,\n        target: o\n      });\n    }).remove(); // Stash the old positions for transition.\n\n    nodes.forEach(function (d) {\n      d.x0 = d.x;\n      d.y0 = d.y;\n    });\n  } // Toggle children on click.\n\n\n  function click(d) {\n    if (elementselector == \"tree-container\") {\n      updateSub(d);\n    }\n\n    if (d.children) {// close\n      // d._children = d.children;\n      // d.children = null;\n    } else {\n      // collapse\n      d.children = d._children;\n      d._children = null;\n    }\n\n    update(d);\n  } //Redraw for zoom\n\n\n  function redraw() {\n    svg.attr(\"transform\", \"translate(\" + d3.event.translate + \")\" + \" scale(\" + d3.event.scale + \")\");\n  }\n} //end expand tree\n\n\nfunction flatToHierarchy(all) {\n  // degenerate binary tree, accepts object array\n  var helper = all.reduce(function (h, o) {\n    return h[o._id] = Object.assign({}, o), h;\n  }, Object.create(null));\n  var tree = all.reduce(function (t, node) {\n    var current = helper[node._id];\n\n    if (current.parentid === 0) {\n      // if it doesn't have a parent push to root\n      t = current;\n      t.children = [];\n    } else {\n      helper[node.parentid].children || (helper[node.parentid].children = []); // add the children array to the parent, if it doesn't exist\n\n      helper[node.parentid].children.push(current); // push the current item to the parent children array\n    }\n\n    return t;\n  }, []);\n  return tree;\n}\n\nfunction reset() {\n  // Prevent redeclarations\n  node.remove();\n  link.remove();\n  svg.remove();\n  nodes = [];\n  links = [];\n}\n\nexport { expandTree, flatToHierarchy, reset };",{"version":3,"sources":["/opt/lampp/htdocs/ac_frontend_app/public/development/src/views/expand-tree.js"],"names":["expandTree","d3","treedata","elementselector","updateSub","root","margin","top","right","bottom","left","width","height","i","duration","rectW","rectH","tree","layout","nodeSize","diagonal","svg","projection","d","x","y","zm","select","append","attr","call","responsivefy","container","node","parentNode","parseInt","style","aspect","resize","window","on","targetWidth","Math","round","x0","y0","collapse","children","_children","forEach","update","source","nodes","reverse","links","depth","selectAll","data","id","nodeEnter","enter","click","html","name","nodeUpdate","transition","nodeExit","exit","remove","link","target","insert","o","redraw","event","translate","scale","flatToHierarchy","all","helper","reduce","h","_id","Object","assign","create","t","current","parentid","push","reset"],"mappings":"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","sourcesContent":["/* Expandable tree v.1.0 */\nfunction expandTree(d3, treedata, elementselector, updateSub) {\n  // tree hierachy\n  var root = treedata;\n  var margin = {\n      top: 20,\n      right: 120,\n      bottom: 20,\n      left: 120\n    },\n    width = 960 - margin.right - margin.left,\n    height = 800 - margin.top - margin.bottom;\n\n  var i = 0,\n    duration = 750,\n    rectW = 300,\n    rectH = 50;\n\n  var tree = d3.layout.tree().nodeSize([70, 40]);\n  var diagonal = d3.svg.diagonal().projection(function(d) {\n    return [d.x + rectW / 2, d.y + rectH / 2];\n  });\n\n  var zm;\n  var svg = d3\n    .select(\"#\" + elementselector)\n    .append(\"svg\")\n    .attr(\"width\", 500)\n    .attr(\"height\", 1000)\n    .call(responsivefy)\n    //.call(zm = d3.behavior.zoom().scaleExtent([1,3]).on(\"zoom\", redraw() ))\n    .append(\"g\")\n    .attr(\"transform\", \"translate(\" + 90 + \",\" + 30 + \")\");\n  //necessary so that zoom knows where to zoom and unzoom from\n  //zm.translate([350, 20]);\n  function responsivefy(svg) {\n    // get container + svg aspect ratio\n    var container = d3.select(svg.node().parentNode),\n      width = parseInt(svg.style(\"width\")),\n      height = parseInt(svg.style(\"height\")),\n      aspect = width / height;\n    // add viewBox and preserveAspectRatio properties,\n    // and call resize so that svg resizes on inital page load\n    svg\n      .attr(\"viewBox\", \"0 0 \" + width + \" \" + height)\n      .attr(\"perserveAspectRatio\", \"xMinYMid\")\n      .call(resize);\n    d3.select(window).on(\"resize.\" + container.attr(\"id\"), resize);\n    // get width of container and resize svg to fit it\n    function resize() {\n      var targetWidth = parseInt(container.style(\"width\"));\n      svg.attr(\"width\", targetWidth);\n      svg.attr(\"height\", Math.round(targetWidth / aspect));\n    }\n  }\n  root.x0 = 0;\n  root.y0 = height / 2;\n\n  function collapse(d) {\n    if (elementselector == \"tree-container\") {\n      if (d.children) {\n        d._children = d.children;\n        d._children.forEach(collapse);\n        d.children = null;\n      }\n    }\n  }\n\n  root.children.forEach(collapse);\n  update(root);\n\n  d3.select(\"#\" + elementselector).style(\"height\", \"600px\");\n\n  function update(source) {\n    // Compute the new tree layout.\n    var nodes = tree.nodes(root).reverse(),\n      links = tree.links(nodes);\n    // Normalize for fixed-depth.\n    nodes.forEach(function(d) {\n      d.y = d.depth * 135;\n    });\n    // Update the nodes…\n    var node = svg.selectAll(\"g.node\").data(nodes, function(d) {\n      return d.id || (d.id = ++i);\n    });\n    // Enter any new nodes at the parent's previous position.\n    var nodeEnter = node\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"node\")\n      .attr(\"transform\", function(d) {\n        return \"translate(\" + source.x0 + \",\" + source.y0 + \")\";\n      })\n      .on(\"click\", click);\n\n    nodeEnter\n      .append(\"rect\")\n      .attr(\"width\", rectW)\n      .attr(\"height\", rectH)\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 1)\n      .style(\"fill\", function(d) {\n        return d._children ? \"#9e9e9e\" : \"#fff\";\n      });\n\n    // nodeEnter.append(\"text\")\n    // .attr(\"x\", rectW / 2)\n    // .attr(\"y\", rectH / 2)\n    // .attr(\"dy\", \".35em\")\n    // .attr(\"text-anchor\", \"middle\")\n    // .text(function (d) {\n    //     return d.name;\n    // })\n    //.call(wrap);\n\n    nodeEnter\n      .append(\"foreignObject\")\n      .attr(\"width\", function() {\n        return rectW;\n      })\n      .attr(\"height\", function() {\n        return rectH;\n      })\n      .append(\"xhtml\")\n      .html(function(d) {\n        return `<div style=\"width:'${rectW}px; height:${rectH}'px;\" class=\"node-text wordwrap text-center\"><b>${d.name}</b></div>`;\n      });\n\n    // Transition nodes to their new position.\n    var nodeUpdate = node\n      .transition()\n      .duration(duration)\n      .attr(\"transform\", function(d) {\n        return \"translate(\" + d.x + \",\" + d.y + \")\";\n      });\n\n    nodeUpdate\n      .select(\"rect\")\n      .attr(\"width\", rectW)\n      .attr(\"height\", rectH)\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 1)\n      .style(\"fill\", function(d) {\n        return d._children ? \"#9e9e9e\" : \"#fff\";\n      });\n\n    nodeUpdate.select(\"text\").style(\"fill-opacity\", 1);\n\n    // Transition exiting nodes to the parent's new position.\n    var nodeExit = node\n      .exit()\n      .transition()\n      .duration(duration)\n      .attr(\"transform\", function(d) {\n        return \"translate(\" + source.x + \",\" + source.y + \")\";\n      })\n      .remove();\n\n    nodeExit\n      .select(\"rect\")\n      .attr(\"width\", rectW)\n      .attr(\"height\", rectH)\n      //.attr(\"width\", bbox.getBBox().width)\"\"\n      //.attr(\"height\", bbox.getBBox().height)\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 1);\n\n    nodeExit.select(\"text\");\n\n    // Update the links…\n    var link = svg.selectAll(\"path.link\").data(links, function(d) {\n      return d.target.id;\n    });\n\n    // Enter any new links at the parent's previous position.\n    link\n      .enter()\n      .insert(\"path\", \"g\")\n      .attr(\"class\", \"link\")\n      .attr(\"x\", rectW / 2)\n      .attr(\"y\", rectH / 2)\n      //.attr('marker-end', 'url(#end-arrow)')\n      .attr(\"d\", function(d) {\n        var o = {\n          x: source.x0,\n          y: source.y0\n        };\n        return diagonal({\n          source: o,\n          target: o\n        });\n      });\n\n    // Transition links to their new position.\n    link\n      .transition()\n      .duration(duration)\n      .attr(\"d\", diagonal);\n\n    // Transition exiting nodes to the parent's new position.\n    link\n      .exit()\n      .transition()\n      .duration(duration)\n      .attr(\"d\", function(d) {\n        var o = {\n          x: source.x,\n          y: source.y\n        };\n        return diagonal({\n          source: o,\n          target: o\n        });\n      })\n      .remove();\n\n    // Stash the old positions for transition.\n    nodes.forEach(function(d) {\n      d.x0 = d.x;\n      d.y0 = d.y;\n    });\n  }\n\n  // Toggle children on click.\n  function click(d) {\n    if (elementselector == \"tree-container\") {\n      updateSub(d);\n    }\n    if (d.children) {\n      // close\n      // d._children = d.children;\n      // d.children = null;\n    } else {\n      // collapse\n      d.children = d._children;\n      d._children = null;\n    }\n    update(d);\n  }\n\n  //Redraw for zoom\n  function redraw() {\n    svg.attr(\n      \"transform\",\n      \"translate(\" + d3.event.translate + \")\" + \" scale(\" + d3.event.scale + \")\"\n    );\n  }\n} //end expand tree\n\nfunction flatToHierarchy(all) {\n  // degenerate binary tree, accepts object array\n  const helper = all.reduce(\n    (h, o) => ((h[o._id] = Object.assign({}, o)), h),\n    Object.create(null)\n  );\n  const tree = all.reduce((t, node) => {\n    const current = helper[node._id];\n    if (current.parentid === 0) {\n      // if it doesn't have a parent push to root\n      t = current;\n      t.children = [];\n    } else {\n      helper[node.parentid].children || (helper[node.parentid].children = []); // add the children array to the parent, if it doesn't exist\n      helper[node.parentid].children.push(current); // push the current item to the parent children array\n    }\n    return t;\n  }, []);\n  return tree;\n}\nfunction reset() {\n  // Prevent redeclarations\n  node.remove();\n  link.remove();\n  svg.remove();\n  nodes = [];\n  links = [];\n}\nexport { expandTree, flatToHierarchy, reset };\n"]}]}