{"remainingRequest":"/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/babel-loader/lib/index.js!/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/eslint-loader/index.js??ref--13-0!/opt/lampp/htdocs/ac_frontend_app/public/development/src/views/expand-tree.js","dependencies":[{"path":"/opt/lampp/htdocs/ac_frontend_app/public/development/src/views/expand-tree.js","mtime":1558090387104},{"path":"/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\n\n/* Expandable tree v.1.0 */\nfunction expandTree(d3, treedata, elementselector, updateSub, treelegth) {\n  // tree hierachy\n  var root = treedata;\n  var i = 0,\n      duration = 750,\n      rectW = 300,\n      rectH = 50; //sizeof the rectangle\n\n  var tree = d3.layout.tree().nodeSize([70, 40]);\n  var diagonal = d3.svg.diagonal().projection(function (d) {\n    return [d.x + rectW / 2, d.y + rectH / 2];\n  });\n  var svg = d3.select(\"#\" + elementselector).append(\"div\").classed(\"svg-container\", true) //container class to make it responsive\n  .append(\"svg\") //.attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  //.attr(\"viewBox\", \"0 0 600 400\")\n  //.attr(\"width\", 500)\n  .attr(\"height\", 150 * treelegth) //height of the tree\n  .call(responsivefy).append(\"g\");\n\n  function responsivefy(svg) {\n    // get container + svg aspect ratio\n    var container = d3.select(svg.node().parentNode),\n        width = parseInt(svg.style(\"width\")),\n        height = parseInt(svg.style(\"height\")),\n        aspect = width / height; // add viewBox and preserveAspectRatio properties,\n    // and call resize so that svg resizes on inital page load\n\n    svg.attr(\"viewBox\", \"0 0 \" + width + \" \" + height).attr(\"perserveAspectRatio\", \"xMinYMid\").call(resize);\n    d3.select(window).on(\"resize.\" + container.attr(\"id\"), resize); // get width of container and resize svg to fit it\n\n    function resize() {\n      var targetWidth = parseInt(container.style(\"width\"));\n      svg.attr(\"width\", targetWidth);\n      svg.attr(\"height\", Math.round(targetWidth / aspect));\n    }\n  }\n\n  root.x0 = 0;\n  root.y0 = 0;\n  update(root); //d3.select(\"#\" + elementselector).style(\"height\", \"600px\");\n\n  function update(source) {\n    // Compute the new tree layout.\n    var nodes = tree.nodes(root).reverse(),\n        links = tree.links(nodes); // Normalize for fixed-depth.\n\n    nodes.forEach(function (d, index) {\n      //console.log(elementselector,'depth', d);\n      var generalgain = 0;\n      var previous = d.depth > 0 ? nodes[index + 1].name : d.name;\n      var singlegain = stringChecker(previous);\n      generalgain += singlegain;\n      console.log(d.name, ' ', d.depth, index, previous);\n      d.y = d.depth * 135; // path from one node to another\n    });\n\n    function stringChecker(string) {\n      // console.log('string length', string.length);\n      var detect = string.length / 50;\n      return detect > 1 ? detect : 1;\n    } // Update the nodes…\n\n\n    var node = svg.selectAll(\"g.node\").data(nodes, function (d) {\n      return d.id || (d.id = ++i);\n    }); // Enter any new nodes at the parent's previous position.\n\n    var nodeEnter = node.enter().append(\"g\").attr(\"class\", \"node\").attr(\"transform\", function (d) {\n      return \"translate(\" + source.x0 + \",\" + source.y0 + \")\";\n    }).on(\"click\", click);\n    nodeEnter.append(\"rect\").attr(\"width\", rectW).attr(\"height\", function (d) {\n      var mainheight = stringChecker(d.name) > 1 ? 100 : rectH; //console.log('mainheight', d.name, mainheight);\n\n      return mainheight;\n    }).attr(\"stroke\", \"black\").attr(\"stroke-width\", 1).style(\"fill\", function (d) {\n      return d._children ? \"#9e9e9e\" : \"#fff\";\n    });\n    nodeEnter.append(\"foreignObject\").attr(\"width\", function () {\n      return rectW;\n    }).attr(\"height\", function (d) {\n      var subheight = stringChecker(d.name) > 1 ? 100 : rectH; //console.log('subheight', d.name, subheight);\n\n      return subheight;\n    }).append(\"xhtml\").html(function (d) {\n      return \"<div class=\\\"node-text wordwrap text-center\\\">\".concat(d.name, \" </div>\");\n    }); // Transition nodes to their new position.\n\n    var nodeUpdate = node.transition().duration(duration).attr(\"transform\", function (d) {\n      return \"translate(\" + d.x + \",\" + d.y + \")\";\n    }); // nodeUpdate\n    //   .select(\"rect\")\n    //   .attr(\"width\", rectW)\n    //   .attr(\"height\", rectH)\n    //   .attr(\"stroke\", \"black\")\n    //   .attr(\"stroke-width\", 1)\n    //   .style(\"fill\", function(d) {\n    //     return d._children ? \"#9e9e9e\" : \"#fff\";\n    //   });\n\n    nodeUpdate.select(\"text\").style(\"fill-opacity\", 1); // Transition exiting nodes to the parent's new position.\n\n    var nodeExit = node.exit().transition().duration(duration).attr(\"transform\", function (d) {\n      return \"translate(\" + source.x + \",\" + source.y + \")\";\n    }).remove();\n    nodeExit.select(\"rect\").attr(\"width\", rectW).attr(\"height\", rectH) //.attr(\"width\", bbox.getBBox().width)\"\"\n    //.attr(\"height\", bbox.getBBox().height)\n    .attr(\"stroke\", \"black\").attr(\"stroke-width\", 1);\n    nodeExit.select(\"text\"); // Update the links…\n\n    var link = svg.selectAll(\"path.link\").data(links, function (d) {\n      return d.target.id;\n    }); // Enter any new links at the parent's previous position.\n\n    link.enter().insert(\"path\", \"g\").attr(\"class\", \"link\").attr(\"x\", rectW / 2).attr(\"y\", rectH / 2) //.attr('marker-end', 'url(#end-arrow)')\n    .attr(\"d\", function (d) {\n      var o = {\n        x: source.x0,\n        y: source.y0\n      };\n      return diagonal({\n        source: o,\n        target: o\n      });\n    }); // Transition links to their new position.\n\n    link.transition().duration(duration).attr(\"d\", diagonal); // Transition exiting nodes to the parent's new position.\n\n    link.exit().transition().duration(duration).attr(\"d\", function (d) {\n      var o = {\n        x: source.x,\n        y: source.y\n      };\n      return diagonal({\n        source: o,\n        target: o\n      });\n    }).remove(); // Stash the old positions for transition.\n\n    nodes.forEach(function (d) {\n      d.x0 = d.x;\n      d.y0 = d.y;\n    });\n  } // Toggle children on click.\n\n\n  function click(d) {\n    if (elementselector == \"tree-container\") {\n      updateSub(d);\n    }\n\n    if (d.children) {// close\n      // d._children = d.children;\n      // d.children = null;\n    } else {\n      // collapse\n      d.children = d._children;\n      d._children = null;\n    }\n\n    update(d);\n  }\n\n  $('[data-toggle=\"popover\"]').popover();\n} //end expand tree\n\n\nfunction flatToHierarchy(all) {\n  // degenerate binary tree, accepts object array\n  var helper = all.reduce(function (h, o) {\n    return h[o._id] = Object.assign({}, o), h;\n  }, Object.create(null));\n  var tree = all.reduce(function (t, node) {\n    var current = helper[node._id];\n\n    if (current.parentid === 0) {\n      // if it doesn't have a parent push to root\n      t = current;\n      t.children = [];\n    } else {\n      helper[node.parentid].children || (helper[node.parentid].children = []); // add the children array to the parent, if it doesn't exist\n\n      helper[node.parentid].children.push(current); // push the current item to the parent children array\n    }\n\n    return t;\n  }, []);\n  return tree;\n}\n\nfunction reset() {\n  // Prevent redeclarations\n  node.remove();\n  link.remove();\n  svg.remove();\n  nodes = [];\n  links = [];\n}\n\nexport { expandTree, flatToHierarchy, reset };",{"version":3,"sources":["/opt/lampp/htdocs/ac_frontend_app/public/development/src/views/expand-tree.js"],"names":["expandTree","d3","treedata","elementselector","updateSub","treelegth","root","i","duration","rectW","rectH","tree","layout","nodeSize","diagonal","svg","projection","d","x","y","select","append","classed","attr","call","responsivefy","container","node","parentNode","width","parseInt","style","height","aspect","resize","window","on","targetWidth","Math","round","x0","y0","update","source","nodes","reverse","links","forEach","index","generalgain","previous","depth","name","singlegain","stringChecker","console","log","string","detect","length","selectAll","data","id","nodeEnter","enter","click","mainheight","_children","subheight","html","nodeUpdate","transition","nodeExit","exit","remove","link","target","insert","o","children","$","popover","flatToHierarchy","all","helper","reduce","h","_id","Object","assign","create","t","current","parentid","push","reset"],"mappings":"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","sourcesContent":["/* Expandable tree v.1.0 */\nfunction expandTree(d3, treedata, elementselector, updateSub,treelegth) {\n  // tree hierachy\n  var root = treedata;\n  var i = 0,\n    duration = 750,\n    rectW = 300,\n    rectH = 50; //sizeof the rectangle\n\n  var tree = d3.layout.tree().nodeSize([70, 40]);\n  var diagonal = d3.svg.diagonal().projection(function(d) {\n    return [d.x + rectW / 2, d.y + rectH / 2];\n  });\n\n  var svg = d3\n    .select(\"#\" + elementselector)\n    .append(\"div\")\n    .classed(\"svg-container\", true) //container class to make it responsive\n    .append(\"svg\")\n    //.attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n    //.attr(\"viewBox\", \"0 0 600 400\")\n    //.attr(\"width\", 500)\n    .attr(\"height\", 150 * treelegth) //height of the tree\n    .call(responsivefy)\n    .append(\"g\");\n  function responsivefy(svg) {\n    // get container + svg aspect ratio\n    var container = d3.select(svg.node().parentNode),\n      width = parseInt(svg.style(\"width\")),\n      height = parseInt(svg.style(\"height\")),\n      aspect = width / height;\n    // add viewBox and preserveAspectRatio properties,\n    // and call resize so that svg resizes on inital page load\n    svg\n      .attr(\"viewBox\", \"0 0 \" + width + \" \" + height)\n      .attr(\"perserveAspectRatio\", \"xMinYMid\")\n      .call(resize);\n    d3.select(window).on(\"resize.\" + container.attr(\"id\"), resize);\n    // get width of container and resize svg to fit it\n    function resize() {\n      var targetWidth = parseInt(container.style(\"width\"));\n      svg.attr(\"width\", targetWidth);\n      svg.attr(\"height\", Math.round(targetWidth / aspect));\n    }\n  }\n  root.x0 = 0;\n  root.y0 = 0;\n\n  update(root);\n\n  //d3.select(\"#\" + elementselector).style(\"height\", \"600px\");\n\n  function update(source) {\n    // Compute the new tree layout.\n    var nodes = tree.nodes(root).reverse(),\n      links = tree.links(nodes);\n    // Normalize for fixed-depth.\n    nodes.forEach(function(d, index) {\n      //console.log(elementselector,'depth', d);\n      let generalgain = 0;\n      let previous = d.depth > 0 ? nodes[index+1].name : d.name;\n      let singlegain = stringChecker(previous);\n      generalgain += singlegain;\n      console.log(d.name, ' ', d.depth, index, previous);\n      d.y = d.depth * 135; // path from one node to another\n    });\n    function stringChecker(string) {\n      // console.log('string length', string.length);\n      let detect = string.length / 50;\n      return detect > 1 ? detect : 1;\n    }\n    // Update the nodes…\n    var node = svg.selectAll(\"g.node\").data(nodes, function(d) {\n      return d.id || (d.id = ++i);\n    });\n    // Enter any new nodes at the parent's previous position.\n    var nodeEnter = node\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"node\")\n      .attr(\"transform\", function(d) {\n        return \"translate(\" + source.x0 + \",\" + source.y0 + \")\";\n      })\n      .on(\"click\", click);\n\n    nodeEnter\n      .append(\"rect\")\n      .attr(\"width\", rectW)\n      .attr(\"height\", function(d){\n        let mainheight = stringChecker(d.name) > 1 ? 100 : rectH;\n        //console.log('mainheight', d.name, mainheight);\n        return mainheight;\n      })\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 1)\n      .style(\"fill\", function(d) {\n        return d._children ? \"#9e9e9e\" : \"#fff\";\n      });\n\n    nodeEnter\n      .append(\"foreignObject\")\n      .attr(\"width\", function() {\n        return rectW;\n      })\n      .attr(\"height\", function(d) {\n        let subheight = stringChecker(d.name) > 1 ? 100 : rectH;\n        //console.log('subheight', d.name, subheight);\n        return subheight;\n      })\n      .append(\"xhtml\")\n      .html(function(d) {\n        return `<div class=\"node-text wordwrap text-center\">${d.name} </div>`;\n      });\n\n    // Transition nodes to their new position.\n    var nodeUpdate = node\n      .transition()\n      .duration(duration)\n      .attr(\"transform\", function(d) {\n        return \"translate(\" + d.x + \",\" + d.y + \")\";\n      });\n\n    // nodeUpdate\n    //   .select(\"rect\")\n    //   .attr(\"width\", rectW)\n    //   .attr(\"height\", rectH)\n    //   .attr(\"stroke\", \"black\")\n    //   .attr(\"stroke-width\", 1)\n    //   .style(\"fill\", function(d) {\n    //     return d._children ? \"#9e9e9e\" : \"#fff\";\n    //   });\n\n    nodeUpdate.select(\"text\").style(\"fill-opacity\", 1);\n\n    // Transition exiting nodes to the parent's new position.\n    var nodeExit = node\n      .exit()\n      .transition()\n      .duration(duration)\n      .attr(\"transform\", function(d) {\n        return \"translate(\" + source.x + \",\" + source.y + \")\";\n      })\n      .remove();\n\n    nodeExit\n      .select(\"rect\")\n      .attr(\"width\", rectW)\n      .attr(\"height\", rectH)\n      //.attr(\"width\", bbox.getBBox().width)\"\"\n      //.attr(\"height\", bbox.getBBox().height)\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 1);\n\n    nodeExit.select(\"text\");\n\n    // Update the links…\n    var link = svg.selectAll(\"path.link\").data(links, function(d) {\n      return d.target.id;\n    });\n\n    // Enter any new links at the parent's previous position.\n    link\n      .enter()\n      .insert(\"path\", \"g\")\n      .attr(\"class\", \"link\")\n      .attr(\"x\", rectW / 2)\n      .attr(\"y\", rectH / 2)\n      //.attr('marker-end', 'url(#end-arrow)')\n      .attr(\"d\", function(d) {\n        var o = {\n          x: source.x0,\n          y: source.y0\n        };\n        return diagonal({\n          source: o,\n          target: o\n        });\n      });\n\n    // Transition links to their new position.\n    link\n      .transition()\n      .duration(duration)\n      .attr(\"d\", diagonal);\n\n    // Transition exiting nodes to the parent's new position.\n    link\n      .exit()\n      .transition()\n      .duration(duration)\n      .attr(\"d\", function(d) {\n        var o = {\n          x: source.x,\n          y: source.y\n        };\n        return diagonal({\n          source: o,\n          target: o\n        });\n      })\n      .remove();\n\n    // Stash the old positions for transition.\n    nodes.forEach(function(d) {\n      d.x0 = d.x;\n      d.y0 = d.y;\n    });\n  }\n\n  // Toggle children on click.\n  function click(d) {\n    if (elementselector == \"tree-container\") {\n      updateSub(d);\n    }\n    if (d.children) {\n      // close\n      // d._children = d.children;\n      // d.children = null;\n    } else {\n      // collapse\n      d.children = d._children;\n      d._children = null;\n    }\n    update(d);\n  }\n  $('[data-toggle=\"popover\"]').popover();\n} //end expand tree\n\nfunction flatToHierarchy(all) {\n  // degenerate binary tree, accepts object array\n  const helper = all.reduce(\n    (h, o) => ((h[o._id] = Object.assign({}, o)), h),\n    Object.create(null)\n  );\n  const tree = all.reduce((t, node) => {\n    const current = helper[node._id];\n    if (current.parentid === 0) {\n      // if it doesn't have a parent push to root\n      t = current;\n      t.children = [];\n    } else {\n      helper[node.parentid].children || (helper[node.parentid].children = []); // add the children array to the parent, if it doesn't exist\n      helper[node.parentid].children.push(current); // push the current item to the parent children array\n    }\n    return t;\n  }, []);\n  return tree;\n}\nfunction reset() {\n  // Prevent redeclarations\n  node.remove();\n  link.remove();\n  svg.remove();\n  nodes = [];\n  links = [];\n}\nexport { expandTree, flatToHierarchy, reset };\n"]}]}