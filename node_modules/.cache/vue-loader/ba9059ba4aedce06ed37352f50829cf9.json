{"remainingRequest":"/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/vue-loader/lib/index.js??vue-loader-options!/opt/lampp/htdocs/ac_frontend_app/public/development/src/views/process-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"/opt/lampp/htdocs/ac_frontend_app/public/development/src/views/process-list.vue","mtime":1557412587222},{"path":"/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n  \nimport * as d3 from \"d3\";\nimport * as subProcedures from './expand-tree2.js';\nexport default {\n    props : ['treenodes','selectident'],\n    data() {\n        return {\n            treedata : [],\n        }\n    },\n    methods:{\n        loadTree(){\n            let $this = this;   \n            if($this.selectident == 'tree-container'){\n                $this.treedata = subProcedures.flatToHierarchy( $this.subTreeChildren($this.treenodes) );\n                subProcedures.expandTree(d3,$this.treedata,$this.selectident,$this.updateSub);               \n            }else{\n                $this.treedata = subProcedures.flatToHierarchy( $this.formTreeChildren($this.treenodes) );\n                subProcedures.expandTree(d3,$this.treedata,$this.selectident,$this.updateSub);               \n            }            \n        },\n        updateSub(step){\n            //this.$emit('changeActiveStep',step);\n            //this.$emit('updateCurrentForm',step);\n        },\n        subTreeChildren(steps){\n            let all = [];  \n            let unfilteredarr =  steps;\n            unfilteredarr.forEach(function(item,index) { // prepare tree to assign parent\n                let parentid = 0;\n                if(index>0){\n                    parentid = unfilteredarr[index-1]._id\n                }\n                let childinfo = { nodeName:item.name,name:item.name,_id:item._id,parentid:parentid,forms:item.forms };\n                all.push(childinfo);                    \n            });\n            return all;\n        },\n        formTreeChildren(form){\n            let all = [];  \n            let unfilteredarr =  form;\n            unfilteredarr.forEach(function(item,index) { // prepare tree to assign parent\n                let parentid = 0;\n                if(index>0){\n                    parentid = unfilteredarr[index-1]._id\n                }\n                let childinfo = { nodeName:item.name,name:item.name,_id:item._id,parentid:parentid };\n                all.push(childinfo);                    \n            });\n            return all;\n        },\n    \n    },\n    mounted(){\n        this.loadTree();\n    },\n    components:{\n        \n    },\n    updated(){\n        console.log('reupdated');\n        this.subProcedures.reset();\n        this.loadTree();\n    },\n}     \n",{"version":3,"sources":["process-list.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"process-list.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div id=\"list-container center-block\">\n        <div v-bind:id=\"selectident\"></div>\n    </div>\n</template>\n\n<script>  \nimport * as d3 from \"d3\";\nimport * as subProcedures from './expand-tree2.js';\nexport default {\n    props : ['treenodes','selectident'],\n    data() {\n        return {\n            treedata : [],\n        }\n    },\n    methods:{\n        loadTree(){\n            let $this = this;   \n            if($this.selectident == 'tree-container'){\n                $this.treedata = subProcedures.flatToHierarchy( $this.subTreeChildren($this.treenodes) );\n                subProcedures.expandTree(d3,$this.treedata,$this.selectident,$this.updateSub);               \n            }else{\n                $this.treedata = subProcedures.flatToHierarchy( $this.formTreeChildren($this.treenodes) );\n                subProcedures.expandTree(d3,$this.treedata,$this.selectident,$this.updateSub);               \n            }            \n        },\n        updateSub(step){\n            //this.$emit('changeActiveStep',step);\n            //this.$emit('updateCurrentForm',step);\n        },\n        subTreeChildren(steps){\n            let all = [];  \n            let unfilteredarr =  steps;\n            unfilteredarr.forEach(function(item,index) { // prepare tree to assign parent\n                let parentid = 0;\n                if(index>0){\n                    parentid = unfilteredarr[index-1]._id\n                }\n                let childinfo = { nodeName:item.name,name:item.name,_id:item._id,parentid:parentid,forms:item.forms };\n                all.push(childinfo);                    \n            });\n            return all;\n        },\n        formTreeChildren(form){\n            let all = [];  \n            let unfilteredarr =  form;\n            unfilteredarr.forEach(function(item,index) { // prepare tree to assign parent\n                let parentid = 0;\n                if(index>0){\n                    parentid = unfilteredarr[index-1]._id\n                }\n                let childinfo = { nodeName:item.name,name:item.name,_id:item._id,parentid:parentid };\n                all.push(childinfo);                    \n            });\n            return all;\n        },\n    \n    },\n    mounted(){\n        this.loadTree();\n    },\n    components:{\n        \n    },\n    updated(){\n        console.log('reupdated');\n        this.subProcedures.reset();\n        this.loadTree();\n    },\n}     \n</script>\n\n<style>\n\n</style>\n"]}]}