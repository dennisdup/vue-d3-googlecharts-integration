{"remainingRequest":"/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/vue-loader/lib/index.js??vue-loader-options!/opt/lampp/htdocs/ac_frontend_app/public/development/src/views/chart-tree.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/opt/lampp/htdocs/ac_frontend_app/public/development/src/views/chart-tree.vue","mtime":1558141711447},{"path":"/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/lampp/htdocs/ac_frontend_app/public/development/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntable {\n     border-collapse: unset !important;\n }\n",{"version":3,"sources":["chart-tree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;AACA;AACA","file":"chart-tree.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div>\n        <GChart\n            type=\"OrgChart\"\n            :settings=\"{ packages: ['orgchart'] }\"\n            :options=\"chartOptions\"    \n            :events=\"chartEvents\"    \n            @ready=\"onChartReady\" \n            :data=\"chartData\"\n        />\n    </div>\n</template>\n\n<script>\nimport Vuex from \"vuex\";\nimport { GChart } from 'vue-google-charts'\nexport default {\n    props : ['treenodes','selectident'],\n    data() {\n        return {\n            treedata : [],\n            chartData : [],\n            chartOptions: {\n                allowHtml : true,\n                // allowCollapse : true,\n                //nodeClass : \"shadow1\",\n                //selectedNodeClass : \"bg-warning\",\n                size : \"medium\"\n            },     \n            chartEvents: {\n                'select': () => {\n                    this.updateSteps();\n                },\n                'onmouseover' : (row) =>{\n                    this.updateSelect(row);\n                   //console.log('onmouseover',row);\n                },\n            },\n            selectedNode : 0  \n        }\n    },\n    components: {\n        GChart\n    },\n    mounted(){\n        this.treedata = this.subTreeChildren;\n        //console.log('chartData', this.chartData);\n    },\n    computed:{\n        subTreeChildren(){\n            let steps = this.treenodes;\n            let all = [];  \n            let unfilteredarr =  steps;\n            unfilteredarr.forEach(function(item,index) { // prepare tree to assign parent\n                let parentid = \"\";\n                if(index>0){\n                    parentid = unfilteredarr[index-1]._id\n                }\n                let childinfo = [ { v:item._id, f:item.name }, parentid, item.name ];\n                all.push(childinfo);                    \n            });\n            return all;\n        }\n    },\n    methods: {\n        updateSteps(){\n            let $this = this;\n            if($this.selectident == 'tree-container'){\n                //console.log('forms',$this.treenodes[$this.selectedNode].forms );\n                $this.$store.dispatch('updateSteps',$this.treenodes[$this.selectedNode]);\n            }\n        },\n        updateSelect(val){\n            this.selectedNode = val.row;\n        },\n        onChartReady(){\n           let $this = this;\n           var data = new google.visualization.DataTable();\n            data.addColumn('string', 'Name');\n            data.addColumn('string', 'Parent');\n            data.addColumn('string', 'ToolTip');\n            // For each orgchart box, provide the name, parent, and tooltip to show.\n            data.addRows($this.treedata);\n            $this.chartData = data;\n        }\n    }\n\n}\n</script>\n\n<style>\n   table {\n        border-collapse: unset !important;\n    }\n</style>\n"]}]}